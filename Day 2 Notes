
Same Origin
In web development, the concept of the "same origin policy" is crucial for web security, and it defines that two URLs are considered to have the "same origin" if they share the same protocol (e.g., HTTP or HTTPS), domain (e.g., example.com), and port (e.g., :80 for HTTP, :443 for HTTPS).

Here's a breakdown of what each component of the "same origin" means

Protocol: The protocol is the part of the URL that specifies how the browser should communicate with the server. Common protocols include HTTP and HTTPS. URLs with different protocols, such as HTTP and HTTPS, are not considered to have the same origin due to security restrictions.

Domain: The domain is the human-readable name of the web server that hosts the website. For example, in the URL "https://www.example.com/page", "www.example.com" is the domain. URLs with different domains (e.g., example.com and anotherexample.com) are not considered to have the same origin.

Port: The port is a numerical identifier that specifies a specific communication endpoint on the web server. URLs can include a port number to access different services on the same server. If a URL doesn't specify a port, the default port for the protocol is used (e.g., :80 for HTTP, :443 for HTTPS). If the ports are different in two URLs, they are not considered to have the same origin.

The same origin policy is a security measure implemented by web browsers to prevent web pages from making unauthorized requests to a different origin, which could potentially lead to security vulnerabilities like cross-site request forgery (CSRF) and cross-site scripting (XSS) attacks. By enforcing this policy, browsers help protect users' data and ensure that web applications remain secure.

It's worth noting that there are ways to relax the same-origin policy for specific use cases, such as using Cross-Origin Resource Sharing (CORS) headers to enable cross-origin requests when needed while maintaining security control.
In Action Iframe
An <iframe> tag hosts a separate embedded window, with its own separate document and window objects.

We can access them using properties:

iframe.contentWindow to get the window inside the <iframe>.
iframe.contentDocument to get the document inside the <iframe>, iframe.contentWindow.document.

iframe.onload vs iframe.contentWindow.onload

The iframe.onload event (on the <iframe>tag) is essentially the same as iframe.contentWindow.onload (on the embedded window object). It triggers when the embedded window fully loads with all resources.
Window on subdomain
The document.domain property is a JavaScript feature that can be used to relax the same-origin policy for web pages served from subdomains of the same parent domain. It allows web pages served from different subdomains to communicate with each other using JavaScript, which would normally be restricted by the same-origin policy.
Wrong Document pitfall
The "wrong document" pitfall when working with iframes is a common issue that arises when developers try to access or manipulate elements within an iframe without properly considering the same-origin policy and the structure of the document hierarchy. This can lead to JavaScript errors and unexpected behavior.
Window Frame
In JavaScript, the window.frames collection is an array-like object that represents all the <iframe> elements within the current window or frameset. Each <iframe> element is accessible as an item in the window.frames collection.

An alternative way to get a window object for <iframe>– is to get it from the named collectionwindow.frames:

By number: window.frames[0] – the window object for the first frame in the document.
By name: window.frames.iframeName – the window object for the frame withname="iframeName".

Navigation links are:

window.frames – the collection of “children” windows (for nested frames).
window.parent – the reference to the “parent” (outer) window.
window.top – the reference to the topmost parent window.
Sandbox iframe attribute
The sandbox attribute allows for the exclusion of certain actions inside an <iframe> in order to prevent it from executing untrusted code. 
allow-same-origin
By default "sandbox" forces the “different origin” policy for the iframe. In other words, it makes the browser to treat the iframe as coming from another origin, even if its src points to the same site. With all implied restrictions for scripts. This option removes that feature.
Cross-window
Cross-window messaging, also known as cross-document messaging or postMessage API, is a method for securely communicating between different windows or iframes within a web application, even when they have different origins (e.g., different domains, protocols, or ports). This communication allows data to be exchanged and actions to be triggered across documents while maintaining strict security controls.


